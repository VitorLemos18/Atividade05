import Head from "next/head";
import { useEffect, useState } from "react";
import { headers } from "../../next.config";
import "bootstrap/dist/css/bootstrap.min.css";
import { servDelete } from "@/services/servDelete";
import axios from 'axios';

export default function Home() {

  // Declarar a variavel para receber os registros retorno da API
  const [data, setData] = useState([]);

  const [message, setMessage] = useState([]);

  // Declarar a variavel para receber o número da pagina
  //const [page, setPage] = useState([]);

  // Declarar a variavel para receber u ultimo numero da pagina
  //const [lastPage, setLastPage] = useState("");

  // Criar a função com requisição para API recuperar usuários
  const getLivro = async (page) =>{

 /* if(page === undefined){
    page = 1;
  }
  setPage(page)
*/
    // Realizar a requisição para API com axios para a rota listar usuários
    await axios.get("http://localhost:8080/lista")
    .then((response) => { // Acessa o then quando a API retorna status 200

      //Atribuir os registros no state data
      setData(response.data.lista)
      //Atribuir a última página
      //setLestPage(response.data.pagination.lastPage)

    }).catch((err) => { // Acessa o then quando a API retorna erro
      //Acessa o if quando a Api retornar erro
      if (err.response) {
      //Atribui a mensagem no state mensage  
        setMessage(err.response.data.mensage);
      } else {
        //Atribui a mensagem no state mensage
        setMessage("Erro: tente mais tarde!")
      }

    })
  }

  // useEffect é usando para lidar com efeitos colaterais em um componente. por exemplo, atualizar o estado do componente, fazer chamada a APIs, manipular eventos, entre outros.

  useEffect(() => {
    // Chamar a função com requisição para API
    getLivro();
  }, []);

const excluirLivro = async (id) =>{
  console.log("id:"+id)
  // Realizar a requisição para API com axios para a rota listar usuários
  await axios.get("http://localhost:8080/deletaLivro/"+id)
  .then((response) => { // Acessa o then quando a API retorna status 200

    //Atribuir os registros no state data
    setData(response.data.lista)
    //Atribuir a última página
    //setLestPage(response.data.pagination.lastPage)

  }).catch((err) => { // Acessa o then quando a API retorna erro
    //Acessa o if quando a Api retornar erro
    if (err.response) {
    //Atribui a mensagem no state mensage  
      setMessage(err.response.data.mensage);
    } else {
      //Atribui a mensagem no state mensage
      setMessage("Erro: tente mais tarde!")
    }
  })
}

  return (
    <>
      <Head>
        <title>Catálogo de Livros</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>

      <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">

        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/cadastrar">Inserir</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

        <h2>Catálogo de Livros</h2>

  <div class="container mt-5">
   <table class="table">
    <thead>
      <tr>
        <th>CodLivro</th>
        <th>Titulo</th>
        <th>Resumo</th>
        <th>Autor</th>
        <th>Editor</th>
        <th>Ação</th>
      </tr>
    </thead>
    <tbody>
    {data.map(livro => ( 
          <tr key={livro._id}>
            <td>{livro.livro_cod}</td><br />
            <td>{livro.livro_titulo}</td><br />
            <td>{livro.livro_resumo}</td><br />
            <td>{livro.livro_autor}</td><br />
            <td>{livro.livro_editora}</td><br />
            <td>
              <button class="btn btn-danger" onClick={()=>excluirLivro(livro._id)}>Excluir</button>
            </td>
          </tr>
        ))}
    </tbody>
  </table>
</div>
      </main>
    </>
  );
}


/* parte que fica dentro do main, para receber os dados 
        {data.map(user => ( 
          <tr key={user. id}>
            <td>CodLivro: {user.id}</td><br />
            <td>Titulo: {user.titulo}</td><br />
            <td>Resumo: {user.resumo}</td><br />
            <td>Autor: {user.autor}</td><br />
            <td>Editor: {user.editor}</td><br />
          </tr>
        ))}


        <div class="container mt-5">
  <table class="table">
    <thead>
      <tr>
        <th>CodLivro</th>
        <th>Titulo</th>
        <th>Resumo</th>
        <th>Autor</th>
        <th>Editor</th>
        <th>Ação</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>{user.id}</td>
        <td>{user.titulo}</td>
        <td>{user.resumo}</td>
        <td>{user.autor}</td>
        <td>{user.editor}</td>
        <td>
          <button class="btn btn-danger" onclick="excluirLivro({user.id})">Excluir</button>
        </td>
      </tr>
*/